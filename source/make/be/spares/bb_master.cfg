# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.buildstep import BuildStep, ShellMixin
from buildbot.process.remotecommand import RemoteShellCommand
from twisted.internet import defer

# step which analyses .buildbot file and generates required steps
class LoadBBFile(ShellMixin, BuildStep):

    def __init__(self, workdir, bbfile, **kwargs):
        kwargs = self.setupShellMixin(kwargs, prohibitArgs = ['command',
            'workdir', 'want_stdout'])
        BuildStep.__init__(self, **kwargs)
        self.workdir = workdir
        self.bbfile = bbfile

    @defer.inlineCallbacks
    def run(self):
        self.stdio_log = yield self.addLog('stdio')

        cmd = RemoteShellCommand(
                command = ['cat', self.bbfile],
                workdir = self.workdir,
                want_stdout = True,
                want_stderr = True,
                collectStdout = True
                )
        cmd.useLog(self.stdio_log)
        yield self.runCommand(cmd)

        if cmd.didFail():
            defer.returnValue(util.FAILURE)

        localDict = {}
        exec(compile(cmd.stdout, self.bbfile, 'exec'), localDict)

        if 'bbfileSteps' not in localDict:
            raise Exception("bb file %r does not define 'bbfileSteps'" % (self.bbfile,),)

        self.build.addStepsAfterCurrentStep(localDict['bbfileSteps'])
        defer.returnValue(util.SUCCESS)

#################################################################################
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

sp = secrets.SecretInAFile(dirname="/home/builder/secrets")
svs = sp.loadSecrets(dirname="/home/builder/secrets", suffixes=[""], strip=True)
c['secretsProviders'] = [secrets.SecretInAFile(dirname="/home/builder/secrets")]

####### DB URL
c['db'] = {'db_url' : "sqlite:///state.sqlite"}

####### WORKERS
c['workers'] = [worker.Worker(
    svs.get("linuxWorkerName"),
    svs.get("linuxWorkerPassword"))]
c['protocols'] = {'pb': {'port': 'ssl:9989:privateKey=tls/bbm.key:certKey=tls/bbm.crt'}}

####### CHANGESOURCES

masterRepourl=svs.get("masterRepourl")
repourl=svs.get("repourl")

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        workdir='gitpoller-workdir',
        repourl=masterRepourl,
        project = 'dci',
        branches=True,
        pollInterval=10))

####### SCHEDULERS
c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="anyBranch",
                            treeStableTimer=1,
                            change_filter = util.ChangeFilter(project = 'dci'),
                            builderNames=["linux"]))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["linux"]))

####### BUILDERS
factory = util.BuildFactory()

factory.addStep(steps.Git(
    name='fetch sources',
    repourl=repourl,
    submodules=True,
    mode='incremental',
    progress=True,
    workdir = 'src',
    haltOnFailure = True,))

with factory.withSecrets([('signerKey', svs.get('signerKey'))]):
    factory.addStep(LoadBBFile(
        name = 'load bb file',
        bbfile='source/make/bb.linux.py',
        workdir = 'src',
        haltOnFailure = True,),)

#######
c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
      name="linux",
      workernames=[svs.get("linuxWorkerName")],
      factory=factory))

####### BUILDBOT SERVICES
c['services'] = []

template=u'''\
    <h4>{{ summary }}</h4>

    <p><table border="1">

    <tr><th>prop</th><th>val</th></tr>

    <tr><td>moment   </td><td>{{ build['complete_at'] }}</td></tr>
    <tr><td>ref      </td><td><a href="{{ build_url }}">{{ build_url }}</a></td></tr>
    <tr><td>project  </td><td>{{ build['properties']['project'][0] }}</td></tr>
    <tr><td>branch   </td><td>{{ build['properties']['branch'][0] }}</td></tr>
    <tr><td>revision </td><td>{{ build['properties']['revision'][0] }}</td></tr>
    <tr><td>builder  </td><td>{{ buildername }}</td></tr>
    <tr><td>worker   </td><td>{{ workername }}</td></tr>

    <tr><th>step</th><th>res</th></tr>
    {% for step in build['steps'] %}
    <tr><td>{{ step['name'] }}</td><td>{{ step['results'] }}</td></tr>
    {% endfor %}

    </table></p>
    <p>--<br/>The Buildbot</p>
    '''

generator = reporters.BuildStatusGenerator(
    mode=('change', 'failing', 'passing', 'problem', 'warnings', 'exception'),
    message_formatter=reporters.MessageFormatter(
        template=template,
        template_type='html',
        wantProperties=True,
        wantSteps=True))

mailNotifier = reporters.MailNotifier(
    sendToInterestedUsers=True,
    useSmtps=True,
    fromaddr=svs.get("mailFrom"),
    extraRecipients=[svs.get("mailFrom")],
    relayhost=svs.get("mailHost"),
    smtpPort=int(svs.get("mailPort")),
    smtpUser=svs.get("mailUser"),
    smtpPassword=svs.get("mailPassword"),
    generators=[generator])

c['services'].append(mailNotifier)

####### PROJECT IDENTITY
c['title'] = "Dci"
c['titleURL'] = "https://example.com/"
c['buildbotURL'] = svs.get("buildbotURL")

# minimalistic config to activate new web UI
c['www'] = {}
c['www']['port'] = 8010
c['www']['plugins'] = dict(waterfall_view={}, console_view={}, grid_view={})

c['www']['authz'] = util.Authz(
    allowRules = [
        util.AnyEndpointMatcher(role="admins", defaultDeny=False)
    ],
    roleMatchers = [
        util.RolesFromUsername(roles=['admins'], usernames=['admin'])
    ]
)

c['www']['auth'] = util.UserPasswordAuth([('admin',svs.get("adminPassword"))])
